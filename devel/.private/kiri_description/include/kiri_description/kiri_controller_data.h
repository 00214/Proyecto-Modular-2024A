// Generated by gencpp from file kiri_description/kiri_controller_data.msg
// DO NOT EDIT!


#ifndef KIRI_DESCRIPTION_MESSAGE_KIRI_CONTROLLER_DATA_H
#define KIRI_DESCRIPTION_MESSAGE_KIRI_CONTROLLER_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kiri_description
{
template <class ContainerAllocator>
struct kiri_controller_data_
{
  typedef kiri_controller_data_<ContainerAllocator> Type;

  kiri_controller_data_()
    : desired_positions()
    , new_positions()
    , error()  {
    }
  kiri_controller_data_(const ContainerAllocator& _alloc)
    : desired_positions(_alloc)
    , new_positions(_alloc)
    , error(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _desired_positions_type;
  _desired_positions_type desired_positions;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _new_positions_type;
  _new_positions_type new_positions;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _error_type;
  _error_type error;





  typedef boost::shared_ptr< ::kiri_description::kiri_controller_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kiri_description::kiri_controller_data_<ContainerAllocator> const> ConstPtr;

}; // struct kiri_controller_data_

typedef ::kiri_description::kiri_controller_data_<std::allocator<void> > kiri_controller_data;

typedef boost::shared_ptr< ::kiri_description::kiri_controller_data > kiri_controller_dataPtr;
typedef boost::shared_ptr< ::kiri_description::kiri_controller_data const> kiri_controller_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kiri_description::kiri_controller_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kiri_description::kiri_controller_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kiri_description::kiri_controller_data_<ContainerAllocator1> & lhs, const ::kiri_description::kiri_controller_data_<ContainerAllocator2> & rhs)
{
  return lhs.desired_positions == rhs.desired_positions &&
    lhs.new_positions == rhs.new_positions &&
    lhs.error == rhs.error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kiri_description::kiri_controller_data_<ContainerAllocator1> & lhs, const ::kiri_description::kiri_controller_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kiri_description

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kiri_description::kiri_controller_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kiri_description::kiri_controller_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kiri_description::kiri_controller_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kiri_description::kiri_controller_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kiri_description::kiri_controller_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kiri_description::kiri_controller_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kiri_description::kiri_controller_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e0ab2c92f00a5fd025ef0b87b36cd6b";
  }

  static const char* value(const ::kiri_description::kiri_controller_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e0ab2c92f00a5fdULL;
  static const uint64_t static_value2 = 0x025ef0b87b36cd6bULL;
};

template<class ContainerAllocator>
struct DataType< ::kiri_description::kiri_controller_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kiri_description/kiri_controller_data";
  }

  static const char* value(const ::kiri_description::kiri_controller_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kiri_description::kiri_controller_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] desired_positions\n"
"float64[] new_positions\n"
"float64[] error\n"
;
  }

  static const char* value(const ::kiri_description::kiri_controller_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kiri_description::kiri_controller_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.desired_positions);
      stream.next(m.new_positions);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kiri_controller_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kiri_description::kiri_controller_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kiri_description::kiri_controller_data_<ContainerAllocator>& v)
  {
    s << indent << "desired_positions[]" << std::endl;
    for (size_t i = 0; i < v.desired_positions.size(); ++i)
    {
      s << indent << "  desired_positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.desired_positions[i]);
    }
    s << indent << "new_positions[]" << std::endl;
    for (size_t i = 0; i < v.new_positions.size(); ++i)
    {
      s << indent << "  new_positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.new_positions[i]);
    }
    s << indent << "error[]" << std::endl;
    for (size_t i = 0; i < v.error.size(); ++i)
    {
      s << indent << "  error[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.error[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KIRI_DESCRIPTION_MESSAGE_KIRI_CONTROLLER_DATA_H
